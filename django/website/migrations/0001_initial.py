# Generated by Django 5.1.5 on 2025-05-12 20:43

import colorful.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
import website.models._old
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataInput',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FileFormat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('extension', models.CharField(max_length=25)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FunctionCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(blank=True, max_length=5, null=True)),
                ('backgroundColor', colorful.fields.RGBColorField(blank=True, default='#FFFFFF', null=True, verbose_name='Background Color')),
                ('textColor', colorful.fields.RGBColorField(blank=True, default='#000000', null=True, verbose_name='Text Color')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Function Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(blank=True, null=True)),
                ('description', models.CharField(max_length=250)),
            ],
            options={
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='InstrumentObservatory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.IntegerField(choices=[(1, 'Instrument'), (2, 'Observatory'), (3, 'Unknown')], default=3)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.URLField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.CharField(blank=True, max_length=100, null=True)),
                ('full_text', models.TextField(blank=True, null=True)),
                ('scheme', models.CharField(blank=True, max_length=100, null=True)),
                ('scheme_url', models.URLField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
            ],
            options={
                'ordering': ['identifier', 'name'],
            },
        ),
        migrations.CreateModel(
            name='OperatingSystem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Phenomena',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('version', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RepoStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('identifier', models.URLField(blank=True, null=True)),
                ('prefLabel', models.CharField(max_length=100)),
                ('definition', models.TextField(blank=True, null=True)),
                ('image', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Repo Statuses',
                'ordering': ['prefLabel'],
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('publicationDate', models.DateField(null=True)),
                ('softwareName', models.CharField(max_length=100)),
                ('persistentIdentifier', models.URLField(blank=True, null=True)),
                ('referencePublication', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('conciseDescription', models.TextField(blank=True, max_length=200, null=True)),
                ('documentation', models.URLField(blank=True, null=True)),
                ('relatedPublications', models.TextField(blank=True, null=True)),
                ('codeRepositoryUrl', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': '  Software',
                'ordering': ['softwareName'],
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('member_image', models.ImageField(blank=True, upload_to=website.models._old.resource_media_directory_path)),
                ('description', models.TextField(max_length=700)),
                ('personal_url', models.URLField(blank=True)),
                ('order', models.PositiveIntegerField(default=website.models._old.num_team_members, validators=[django.core.validators.MaxValueValidator(website.models._old.num_team_members)])),
                ('previous_order', models.IntegerField(default=-1)),
                ('is_alumnus', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': '~Team members',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('abbreviation', models.CharField(blank=True, max_length=4)),
                ('theme_color', colorful.fields.RGBColorField(default='#000000')),
                ('text_color', colorful.fields.RGBColorField(default='#ffffff')),
                ('description', models.TextField(blank=True, max_length=700)),
                ('index', models.PositiveIntegerField(blank=True, null=True)),
                ('children', models.ManyToManyField(blank=True, related_name='parents', to='website.category')),
            ],
            options={
                'verbose_name_plural': '~Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('abbreviation', models.CharField(blank=True, max_length=4)),
                ('theme_color', colorful.fields.RGBColorField(default='#000000')),
                ('text_color', colorful.fields.RGBColorField(default='#ffffff')),
                ('description', models.TextField(blank=True, max_length=700)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('children', models.ManyToManyField(blank=True, related_name='parents', to='website.collection')),
            ],
            options={
                'verbose_name_plural': '~Collections',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Functionality',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(blank=True, max_length=5, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='functionalities', to='website.functioncategory')),
            ],
            options={
                'verbose_name_plural': 'Functionalities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('content', models.TextField()),
                ('published_on', models.DateTimeField(null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISH', 'Publish')], default='DRAFT', max_length=20)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '~News items',
                'ordering': ['-published_on'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('identifier', models.URLField(blank=True, null=True)),
                ('parent_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_organizations', to='website.organization')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('identifier', models.URLField(blank=True, null=True)),
                ('funder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='website.organization')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('firstName', models.CharField(default='', max_length=100)),
                ('lastName', models.CharField(default='', max_length=100)),
                ('identifier', models.URLField(blank=True, null=True)),
                ('affiliation', models.ManyToManyField(blank=True, related_name='people', to='website.organization')),
            ],
            options={
                'verbose_name_plural': 'People',
                'ordering': ['lastName', 'firstName'],
            },
        ),
        migrations.CreateModel(
            name='Curator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='curator', to='website.person')),
            ],
            options={
                'ordering': ['person'],
            },
        ),
        migrations.CreateModel(
            name='RelatedItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('type', models.IntegerField(choices=[(1, 'Software'), (2, 'Dataset'), (3, 'Publication'), (4, 'Unknown')], default=4)),
                ('identifier', models.URLField(blank=True, null=True)),
                ('creditText', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('authors', models.ManyToManyField(blank=True, related_name='relatedItems', to='website.person')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedItems', to='website.license')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='The name of the resource (limited to 40 characters)', max_length=150, verbose_name='resource name')),
                ('description', models.TextField(blank=True, help_text='A description of the resource <strong>(may contain Markdown; limited to 700 characters)</strong>', max_length=700)),
                ('release_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to the latest release of the resource', verbose_name='Release URL')),
                ('repo_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong> An (optional) link that points to the github, gitlab, or other public remote repository url for the software. This can also be a link to a binary/other download if source code is not available.', verbose_name='Repository URL')),
                ('docs_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to further information or README about the resource (not the original publication)', verbose_name='Documentation URL')),
                ('website_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to a web-accessible interface for the resource', verbose_name='Website URL')),
                ('author', models.CharField(blank=True, help_text='The developer/researcher credits of the resource (e.g. “Smith, J. et al.” or “The COOL Team”; may contain Markdown)', max_length=256, verbose_name='Author(s)')),
                ('version', models.CharField(blank=True, help_text='The (optional) version number of the resource (name + version must be unique). Updated regularly for github resources with releases.', max_length=20)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last mod date')),
                ('license', models.CharField(blank=True, help_text='The license under which the software is distributed', max_length=256)),
                ('code_language', models.CharField(blank=True, default='', help_text='The primary programming language that the tool is developed in (e.g. Python, R, IDL, etc.)', max_length=256, verbose_name='Code language(s)')),
                ('related_tools', models.CharField(blank=True, default='', help_text='List any tools related to the resource in this submission, i.e. tools that this software has expanded on, tools built off of this software, or tools that work in tandem with this software', max_length=256, verbose_name='Related Tool(s)')),
                ('logo', models.ImageField(blank=True, help_text='Upload an (optional) logo image for the resource (limited to 1MB)', upload_to=website.models._old.resource_media_directory_path)),
                ('logo_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>A URL where the logo image can be fetched from (e.g. https://example.com/logo.png)', verbose_name='Logo (URL)')),
                ('search_keywords', models.CharField(blank=True, default='', help_text="Keywords to prioritize in search, seperated by ','", max_length=256, verbose_name='Search Keywords')),
                ('is_published', models.BooleanField(default=False, help_text='Indicates whether this is a published resource')),
                ('status_notes', models.TextField(blank=True)),
                ('spec_community', models.IntegerField(choices=[(3, 'Good'), (2, 'Partially Met'), (1, 'Needs Improvement'), (0, 'Unknown')], default=0, verbose_name='community')),
                ('spec_documentation', models.IntegerField(choices=[(3, 'Good'), (2, 'Partially Met'), (1, 'Needs Improvement'), (0, 'Unknown')], default=0, verbose_name='documentation')),
                ('spec_testing', models.IntegerField(choices=[(3, 'Good'), (2, 'Partially Met'), (1, 'Needs Improvement'), (0, 'Unknown')], default=0, verbose_name='testing')),
                ('spec_maturity', models.IntegerField(choices=[(3, 'Good'), (2, 'Partially Met'), (1, 'Needs Improvement'), (0, 'Unknown')], default=0, verbose_name='maturity')),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories that are applicable to the resource', related_name='+', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, help_text='The collections that are applicable to the resource', related_name='+', to='website.collection')),
                ('related_resources', models.ManyToManyField(blank=True, to='website.resource')),
            ],
            options={
                'verbose_name_plural': '~Resources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resource_id_temp', models.CharField(blank=True, max_length=32)),
                ('feedback_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('submitter_ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('provide_demo_video', models.BooleanField(default=False, verbose_name='A demonstration video would be helpful')),
                ('provide_tutorial', models.BooleanField(default=False, verbose_name='A hands-on tutorial would be helpful')),
                ('provide_web_app', models.BooleanField(default=False, verbose_name='A web-accessible application would be helpful')),
                ('relate_a_resource', models.BooleanField(default=False, verbose_name='There is another resource that should be linked as related to this one')),
                ('correction_needed', models.BooleanField(default=False, verbose_name='There is something incorrect in the resource listing')),
                ('comments', models.TextField(blank=True, help_text='Maximum 1500 characters.', max_length=1500, verbose_name='Related comments or additional suggestions:')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='website.resource')),
            ],
            options={
                'verbose_name_plural': '~Feedback',
                'ordering': ['-feedback_date'],
            },
        ),
        migrations.CreateModel(
            name='VisibleSoftware',
            fields=[
                ('id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='visible', serialize=False, to='website.software')),
            ],
            options={
                'verbose_name_plural': 'Visible software',
                'ordering': ['id__softwareName'],
            },
        ),
        migrations.AddField(
            model_name='software',
            name='authors',
            field=models.ManyToManyField(related_name='softwares', to='website.person'),
        ),
        migrations.AddField(
            model_name='software',
            name='award',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='softwares', to='website.award'),
        ),
        migrations.AddField(
            model_name='software',
            name='dataInputs',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.datainput'),
        ),
        migrations.AddField(
            model_name='software',
            name='developmentStatus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='softwares', to='website.repostatus'),
        ),
        migrations.AddField(
            model_name='software',
            name='interoperableSoftware',
            field=models.ManyToManyField(blank=True, to='website.software'),
        ),
        migrations.AddField(
            model_name='software',
            name='keywords',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.keyword'),
        ),
        migrations.AddField(
            model_name='software',
            name='license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='softwares_license', to='website.license'),
        ),
        migrations.AddField(
            model_name='software',
            name='logo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='softwares', to='website.image'),
        ),
        migrations.AddField(
            model_name='software',
            name='metadataLicense',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='softwares', to='website.license'),
        ),
        migrations.AddField(
            model_name='software',
            name='operatingSystem',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.operatingsystem'),
        ),
        migrations.AddField(
            model_name='software',
            name='programmingLanguage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='softwares', to='website.programminglanguage'),
        ),
        migrations.AddField(
            model_name='software',
            name='publisher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='softwares', to='website.organization'),
        ),
        migrations.AddField(
            model_name='software',
            name='relatedDatasets',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.relateditem'),
        ),
        migrations.AddField(
            model_name='software',
            name='relatedInstruments',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.instrumentobservatory'),
        ),
        migrations.AddField(
            model_name='software',
            name='relatedObservatories',
            field=models.ManyToManyField(blank=True, related_name='observatories', to='website.instrumentobservatory'),
        ),
        migrations.AddField(
            model_name='software',
            name='relatedPhenomena',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.phenomena'),
        ),
        migrations.AddField(
            model_name='software',
            name='relatedRegion',
            field=models.ManyToManyField(blank=True, related_name='softwares_region', to='website.region'),
        ),
        migrations.AddField(
            model_name='software',
            name='relatedSoftware',
            field=models.ManyToManyField(blank=True, to='website.software'),
        ),
        migrations.AddField(
            model_name='software',
            name='softwareFunctionality',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.functionality'),
        ),
        migrations.AddField(
            model_name='software',
            name='supportedFileFormats',
            field=models.ManyToManyField(blank=True, related_name='softwares', to='website.fileformat'),
        ),
        migrations.CreateModel(
            name='SoftwareVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('number', models.CharField(max_length=100)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('version_pid', models.URLField(blank=True, null=True)),
                ('software', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='website.software')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.AddField(
            model_name='software',
            name='version',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='software_current', to='website.softwareversion'),
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('name', models.CharField(db_index=True, help_text='The name of the resource (limited to 40 characters)', max_length=150, verbose_name='resource name')),
                ('description', models.TextField(blank=True, help_text='A description of the resource <strong>(may contain Markdown; limited to 700 characters)</strong>', max_length=700)),
                ('release_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to the latest release of the resource', verbose_name='Release URL')),
                ('repo_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong> An (optional) link that points to the github, gitlab, or other public remote repository url for the software. This can also be a link to a binary/other download if source code is not available.', verbose_name='Repository URL')),
                ('docs_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to further information or README about the resource (not the original publication)', verbose_name='Documentation URL')),
                ('website_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to a web-accessible interface for the resource', verbose_name='Website URL')),
                ('author', models.CharField(blank=True, help_text='The developer/researcher credits of the resource (e.g. “Smith, J. et al.” or “The COOL Team”; may contain Markdown)', max_length=256, verbose_name='Author(s)')),
                ('version', models.CharField(blank=True, help_text='The (optional) version number of the resource (name + version must be unique). Updated regularly for github resources with releases.', max_length=20)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last mod date')),
                ('license', models.CharField(blank=True, help_text='The license under which the software is distributed', max_length=256)),
                ('code_language', models.CharField(blank=True, default='', help_text='The primary programming language that the tool is developed in (e.g. Python, R, IDL, etc.)', max_length=256, verbose_name='Code language(s)')),
                ('related_tools', models.CharField(blank=True, default='', help_text='List any tools related to the resource in this submission, i.e. tools that this software has expanded on, tools built off of this software, or tools that work in tandem with this software', max_length=256, verbose_name='Related Tool(s)')),
                ('logo', models.ImageField(blank=True, help_text='Upload an (optional) logo image for the resource (limited to 1MB)', upload_to=website.models._old.resource_media_directory_path)),
                ('logo_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>A URL where the logo image can be fetched from (e.g. https://example.com/logo.png)', verbose_name='Logo (URL)')),
                ('search_keywords', models.CharField(blank=True, default='', help_text="Keywords to prioritize in search, seperated by ','", max_length=256, verbose_name='Search Keywords')),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('other_category', models.CharField(blank=True, help_text='Suggest a category not listed here', max_length=256)),
                ('submitter_contact', models.CharField(blank=True, help_text='Please provide a way that our team can contact you', max_length=256, verbose_name='contact info')),
                ('submission_notes', models.TextField(blank=True, help_text='Any further information you would like to include with your submission')),
                ('submitter_ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(0, 'Proposed Tool w/ Missing Info'), (1, 'Ready for 1st Contact'), (2, 'Contacted'), (3, 'Tool Development is Paused (Check Submission Notes)'), (4, 'Received'), (5, 'In Review (Our End)'), (6, 'In Review (Their End)'), (7, 'Resource Created'), (8, 'Web Tool Under Development'), (9, 'In Literature Resource Created'), (10, 'Rejected/Abandoned'), (11, 'Spam')], default='Ready for 1st Contact')),
                ('status_notes', models.TextField(blank=True)),
                ('shepherd', models.CharField(blank=True, max_length=40)),
                ('date_contacted', models.DateField(blank=True, null=True)),
                ('has_unsynced_changes', models.BooleanField(default=False, verbose_name='out of sync')),
                ('contact_count', models.IntegerField(default=0, help_text=['Number of times the submitter has been contacted'])),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories that are applicable to the resource', related_name='+', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, help_text='The collections that are applicable to the resource', related_name='+', to='website.collection')),
            ],
            options={
                'verbose_name_plural': '~Submissions',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='submission',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource', to='website.submission'),
        ),
        migrations.CreateModel(
            name='SubmissionInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dateModified', models.DateField(auto_now=True, null=True)),
                ('modificationDescription', models.TextField(blank=True, null=True)),
                ('metadataVersionNumber', models.CharField(blank=True, max_length=50, null=True)),
                ('submissionDate', models.DateField(blank=True, null=True)),
                ('internalStatusCode', models.IntegerField(choices=[(1, 'Proposed Resource'), (2, 'Ready for Contact'), (3, 'Contacted'), (4, 'Resource Dev Paused'), (5, 'Received'), (6, 'In Review (Our End)'), (7, 'In Review (Their End)'), (8, 'Resource Created (Published)'), (9, 'Rejected/Abandoned'), (10, 'Spam')], default=1)),
                ('internalStatusNote', models.TextField(blank=True, null=True)),
                ('lastContactDate', models.DateField(blank=True, null=True)),
                ('contactCount', models.IntegerField(default=0)),
                ('curatorLock', models.BooleanField(default=False)),
                ('outOfSync', models.BooleanField(default=False)),
                ('curator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submission_infos', to='website.curator')),
                ('leadCurator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submission_infos_led', to='website.curator')),
            ],
            options={
                'verbose_name_plural': '  Submission Info',
                'ordering': ['dateModified', 'submitter__person__lastName'],
            },
        ),
        migrations.AddField(
            model_name='software',
            name='submissionInfo',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='software', to='website.submissioninfo'),
        ),
        migrations.CreateModel(
            name='Submitter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitter', to='website.person')),
            ],
            options={
                'ordering': ['person'],
            },
        ),
        migrations.AddField(
            model_name='submissioninfo',
            name='submitter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submission_infos', to='website.submitter'),
        ),
        migrations.CreateModel(
            name='ToolType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('abbreviation', models.CharField(blank=True, max_length=4)),
                ('theme_color', colorful.fields.RGBColorField(default='#000000')),
                ('text_color', colorful.fields.RGBColorField(default='#ffffff')),
                ('description', models.TextField(blank=True, max_length=700)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('children', models.ManyToManyField(blank=True, related_name='parents', to='website.tooltype')),
            ],
            options={
                'verbose_name_plural': '~Tool types',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='submission',
            name='tool_types',
            field=models.ManyToManyField(blank=True, help_text='The tool types that are applicable to the resource', related_name='+', to='website.tooltype'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tool_types',
            field=models.ManyToManyField(blank=True, help_text='The tool types that are applicable to the resource', related_name='+', to='website.tooltype'),
        ),
        migrations.CreateModel(
            name='InLitResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='The name of the resource (limited to 40 characters)', max_length=150, verbose_name='resource name')),
                ('description', models.TextField(blank=True, help_text='A description of the resource <strong>(may contain Markdown; limited to 700 characters)</strong>', max_length=700)),
                ('release_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to the latest release of the resource', verbose_name='Release URL')),
                ('repo_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong> An (optional) link that points to the github, gitlab, or other public remote repository url for the software. This can also be a link to a binary/other download if source code is not available.', verbose_name='Repository URL')),
                ('docs_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to further information or README about the resource (not the original publication)', verbose_name='Documentation URL')),
                ('website_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to a web-accessible interface for the resource', verbose_name='Website URL')),
                ('author', models.CharField(blank=True, help_text='The developer/researcher credits of the resource (e.g. “Smith, J. et al.” or “The COOL Team”; may contain Markdown)', max_length=256, verbose_name='Author(s)')),
                ('version', models.CharField(blank=True, help_text='The (optional) version number of the resource (name + version must be unique). Updated regularly for github resources with releases.', max_length=20)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('update_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last mod date')),
                ('license', models.CharField(blank=True, help_text='The license under which the software is distributed', max_length=256)),
                ('code_language', models.CharField(blank=True, default='', help_text='The primary programming language that the tool is developed in (e.g. Python, R, IDL, etc.)', max_length=256, verbose_name='Code language(s)')),
                ('related_tools', models.CharField(blank=True, default='', help_text='List any tools related to the resource in this submission, i.e. tools that this software has expanded on, tools built off of this software, or tools that work in tandem with this software', max_length=256, verbose_name='Related Tool(s)')),
                ('logo', models.ImageField(blank=True, help_text='Upload an (optional) logo image for the resource (limited to 1MB)', upload_to=website.models._old.resource_media_directory_path)),
                ('logo_url', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>A URL where the logo image can be fetched from (e.g. https://example.com/logo.png)', verbose_name='Logo (URL)')),
                ('search_keywords', models.CharField(blank=True, default='', help_text="Keywords to prioritize in search, seperated by ','", max_length=256, verbose_name='Search Keywords')),
                ('is_published', models.BooleanField(default=False, help_text='Indicates whether this is a published resource')),
                ('status_notes', models.TextField(blank=True)),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories that are applicable to the resource', related_name='+', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, help_text='The collections that are applicable to the resource', related_name='+', to='website.collection')),
                ('submission', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='il_resource', to='website.submission')),
                ('tool_types', models.ManyToManyField(blank=True, help_text='The tool types that are applicable to the resource', related_name='+', to='website.tooltype')),
            ],
            options={
                'verbose_name_plural': '~In lit resources',
                'ordering': ['name'],
            },
        ),
    ]
