# Generated by Django 5.1.4 on 2025-01-17 22:44

import colorful.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
import website.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('abbreviation', models.CharField(blank=True, max_length=4)),
                ('theme_color', colorful.fields.RGBColorField(default='#000000')),
                ('text_color', colorful.fields.RGBColorField(default='#ffffff')),
                ('description', models.TextField(blank=True, max_length=700)),
                ('index', models.PositiveIntegerField(blank=True, null=True)),
                ('children', models.ManyToManyField(blank=True, related_name='parents', to='website.category')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('abbreviation', models.CharField(blank=True, max_length=4)),
                ('theme_color', colorful.fields.RGBColorField(default='#000000')),
                ('text_color', colorful.fields.RGBColorField(default='#ffffff')),
                ('description', models.TextField(blank=True, max_length=700)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('children', models.ManyToManyField(blank=True, related_name='parents', to='website.collection')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40)),
                ('content', models.TextField()),
                ('tweet_content', models.TextField(blank=True, max_length=180)),
                ('published_on', models.DateTimeField(null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISH', 'Publish')], default='DRAFT', max_length=20)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published_on'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='The name of the resource (limited to 40 characters)', max_length=150, verbose_name='resource name')),
                ('subtitle', models.CharField(blank=True, help_text='A descriptive sub-title (e.g. “Bayesian Statistical Analysis for Transit Lightcurve Fitting”; limited to 100 characters)', max_length=100, verbose_name='resource subtitle')),
                ('version', models.CharField(blank=True, help_text='The (optional) version number of the resource (name + version must be unique). Updated regularly for github resources with releases.', max_length=20)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modification_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last mod date')),
                ('credits', models.CharField(blank=True, help_text='The developer/researcher credits of the resource (e.g. “Smith, J. et al.” or “The COOL Team”; may contain HTML)', max_length=256)),
                ('description', models.TextField(blank=True, help_text='A description of the resource <strong>(may contain HTML; limited to 700 characters)</strong>', max_length=700)),
                ('concise_description', models.CharField(blank=True, help_text='A short (suggested 120 char. max.) descriptive sentence to be used in social media and search previews.', max_length=200)),
                ('code_languages', models.CharField(blank=True, default='', help_text='A list of coding languages used by this tool, seperated by commas (ex: Python3, C, Fortran). If the tool is a website or catalog, or has no code to interact with, put N/A', max_length=256, verbose_name='Code language(s)')),
                ('logo_image', models.ImageField(blank=True, help_text='Upload an (optional) logo image for the resource (limited to 1MB)', upload_to=website.models.resource_media_directory_path)),
                ('logo_link', models.URLField(blank=True, help_text="<strong> Add one link only - </strong>An (optional) link to be associated with the resource's logo")),
                ('about_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to further information or README about the resource (not the original publication)')),
                ('ads_abstract_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to an ADS entry or other bibliographic location for the original publication of the resource; links to ADS libraries also supported', verbose_name='ADS abstract/library link')),
                ('jupyter_link', models.URLField(blank=True, help_text="<strong> Add one link only - </strong>An (optional) link to an interactive Jupyter Notebook tutorial on <a href='https://mybinder.org/' target='_blank' rel='noopener noreferrer'>MyBinder.org</a> or any similar resource", verbose_name='Interactive jupyter notebook tutorial link')),
                ('download_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to downloadable source code and other resources; can be Github, Bitbucket, or any other online repository', verbose_name='Public source code download link')),
                ('download_data_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to downloadable data and other resources; can be Github, Bitbucket, or any other online repository', verbose_name='Public data download link')),
                ('launch_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to a web-accessible interface for the resource', verbose_name='Web Interface link')),
                ('demo_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to tutorial video for the resource', verbose_name='Demo video link')),
                ('discuss_link', models.URLField(blank=True, help_text='An (optional) link to a discussion site for the resource')),
                ('citation_count', models.IntegerField(default=None, editable=False, null=True, verbose_name='citation count')),
                ('related_tool_string', models.CharField(blank=True, default='', help_text='List any tools related to the resource in this submission, i.e. tools that this software has expanded on, tools built off of this software, or tools that work in tandem with this software', max_length=256, verbose_name='Related Tool(s)')),
                ('search_keywords', models.CharField(blank=True, default='', help_text='Keywords to prioritize in search', max_length=256, verbose_name='Search Keywords')),
                ('ascl_id', models.CharField(blank=True, default='', help_text='ASCL ID (YYMM.NNN)', max_length=8, verbose_name='ASCL ID')),
                ('ascii_credits', models.CharField(blank=True, max_length=256)),
                ('is_hosted', models.BooleanField(default=False, help_text='Indicates whether the resource is hosted (executed) on HSSI servers')),
                ('is_published', models.BooleanField(default=False, help_text='Indicates whether this is a published HSSI resource')),
                ('subdomain', models.CharField(blank=True, help_text='The HSSI subdomain of a hosted resource', max_length=20)),
                ('path', models.CharField(blank=True, help_text='The path (starting with /) of a hosted resource', max_length=60)),
                ('github_release', models.TextField(blank=True, help_text='The current update note published on the resource.')),
                ('status_notes', models.TextField(blank=True)),
                ('SEEC_tool', models.BooleanField(default=False, help_text='Check if the tool is related to SEEC', verbose_name='SEEC Related Tool')),
                ('citation_id', models.CharField(blank=True, help_text='DO NOT EDIT: Unique periodical citation ID. format: YYMM-000', max_length=8)),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories that are applicable to the resource', related_name='+', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, help_text='The collections that are applicable to the resource', related_name='+', to='website.collection')),
                ('related_resources', models.ManyToManyField(blank=True, to='website.resource')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resource_id_temp', models.CharField(blank=True, max_length=32)),
                ('feedback_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('submitter_ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('provide_demo_video', models.BooleanField(default=False, verbose_name='A demonstration video would be helpful')),
                ('provide_tutorial', models.BooleanField(default=False, verbose_name='A Jupyter notebook or another hands-on tutorial would be helpful')),
                ('provide_web_app', models.BooleanField(default=False, verbose_name='A web-accessible application would be helpful')),
                ('relate_a_resource', models.BooleanField(default=False, verbose_name='There is another resource that should be linked as related to this one')),
                ('correction_needed', models.BooleanField(default=False, verbose_name='There is something incorrect in the resource listing')),
                ('comments', models.TextField(blank=True, help_text='Maximum 1500 characters.', max_length=1500, verbose_name='Related comments or additional suggestions:')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='website.resource')),
            ],
            options={
                'verbose_name_plural': 'feedback',
                'ordering': ['-feedback_date'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('name', models.CharField(db_index=True, help_text='The name of the resource (limited to 40 characters)', max_length=150, verbose_name='resource name')),
                ('subtitle', models.CharField(blank=True, help_text='A descriptive sub-title (e.g. “Bayesian Statistical Analysis for Transit Lightcurve Fitting”; limited to 100 characters)', max_length=100, verbose_name='resource subtitle')),
                ('version', models.CharField(blank=True, help_text='The (optional) version number of the resource (name + version must be unique). Updated regularly for github resources with releases.', max_length=20)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modification_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last mod date')),
                ('credits', models.CharField(blank=True, help_text='The developer/researcher credits of the resource (e.g. “Smith, J. et al.” or “The COOL Team”; may contain HTML)', max_length=256)),
                ('description', models.TextField(blank=True, help_text='A description of the resource <strong>(may contain HTML; limited to 700 characters)</strong>', max_length=700)),
                ('concise_description', models.CharField(blank=True, help_text='A short (suggested 120 char. max.) descriptive sentence to be used in social media and search previews.', max_length=200)),
                ('code_languages', models.CharField(blank=True, default='', help_text='A list of coding languages used by this tool, seperated by commas (ex: Python3, C, Fortran). If the tool is a website or catalog, or has no code to interact with, put N/A', max_length=256, verbose_name='Code language(s)')),
                ('logo_image', models.ImageField(blank=True, help_text='Upload an (optional) logo image for the resource (limited to 1MB)', upload_to=website.models.resource_media_directory_path)),
                ('logo_link', models.URLField(blank=True, help_text="<strong> Add one link only - </strong>An (optional) link to be associated with the resource's logo")),
                ('about_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to further information or README about the resource (not the original publication)')),
                ('ads_abstract_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to an ADS entry or other bibliographic location for the original publication of the resource; links to ADS libraries also supported', verbose_name='ADS abstract/library link')),
                ('jupyter_link', models.URLField(blank=True, help_text="<strong> Add one link only - </strong>An (optional) link to an interactive Jupyter Notebook tutorial on <a href='https://mybinder.org/' target='_blank' rel='noopener noreferrer'>MyBinder.org</a> or any similar resource", verbose_name='Interactive jupyter notebook tutorial link')),
                ('download_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to downloadable source code and other resources; can be Github, Bitbucket, or any other online repository', verbose_name='Public source code download link')),
                ('download_data_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to downloadable data and other resources; can be Github, Bitbucket, or any other online repository', verbose_name='Public data download link')),
                ('launch_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to a web-accessible interface for the resource', verbose_name='Web Interface link')),
                ('demo_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to tutorial video for the resource', verbose_name='Demo video link')),
                ('discuss_link', models.URLField(blank=True, help_text='An (optional) link to a discussion site for the resource')),
                ('citation_count', models.IntegerField(default=None, editable=False, null=True, verbose_name='citation count')),
                ('related_tool_string', models.CharField(blank=True, default='', help_text='List any tools related to the resource in this submission, i.e. tools that this software has expanded on, tools built off of this software, or tools that work in tandem with this software', max_length=256, verbose_name='Related Tool(s)')),
                ('search_keywords', models.CharField(blank=True, default='', help_text='Keywords to prioritize in search', max_length=256, verbose_name='Search Keywords')),
                ('ascl_id', models.CharField(blank=True, default='', help_text='ASCL ID (YYMM.NNN)', max_length=8, verbose_name='ASCL ID')),
                ('ascii_credits', models.CharField(blank=True, max_length=256)),
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False)),
                ('other_category', models.CharField(blank=True, help_text='Suggest a category not listed here', max_length=256)),
                ('private_code_or_data_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>If your resource is not publicly available and you would like EMAC to host it, please provide a (private) link to your source code', verbose_name='private code/data link')),
                ('host_app_on_emac', models.BooleanField(default=False, help_text='Would you like your tool to be hosted/executed on an HSSI server?', verbose_name='host web-app?')),
                ('host_data_on_emac', models.BooleanField(default=False, help_text='Would you like to store data/model output on a web-accessible HSSI server?', verbose_name='host output?')),
                ('make_web_interface', models.BooleanField(default=False, help_text='Are you interested in a new web interface?', verbose_name='new web interface?')),
                ('submitter_first_name', models.CharField(blank=True, help_text='Please provide your first name', max_length=100, verbose_name='your first name')),
                ('submitter_last_name', models.CharField(blank=True, help_text='Please provide your last name', max_length=100, verbose_name='your last name')),
                ('submitter_email', models.EmailField(help_text='Please provide an email address at which the HSSI team can contact you', max_length=254, verbose_name='your email')),
                ('submission_notes', models.TextField(blank=True, help_text='Any further information you would like to include with your submission')),
                ('github_release', models.TextField(blank=True, help_text='Release Message for the latest Github release (Automatically pulled, but can be edited before sending out an alert)')),
                ('submitter_ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('status', models.CharField(choices=[('MISSING_INFO', '0) Proposed Tool w/ Missing Info'), ('FIRST_CONTACT', '1) Ready for 1st Contact'), ('CONTACTED', '2) Contacted'), ('TOOL_PAUSED', '3) Tool Development is Paused (Check Submission Notes)'), ('RECEIVED', '4) Received'), ('IN_REVIEW', '5) In Review (Our End)'), ('ACCEPTED', '6) In Review (Their End)'), ('RESOURCE_CREATED', '7) Resource Created'), ('UNDER_DEVELOPMENT', '7a) Web Tool Under Development'), ('IN_LITERATURE', '7b) In Literature Resource Created'), ('REJECTED_ABANDONED', '8) Rejected/Abandoned'), ('SPAM', '9) Spam')], default='FIRST_CONTACT', max_length=100)),
                ('status_notes', models.TextField(blank=True)),
                ('shepherd', models.CharField(blank=True, max_length=40)),
                ('date_contacted', models.DateField(blank=True, null=True)),
                ('has_unsynced_changes', models.BooleanField(default=False, verbose_name='out of sync')),
                ('SEEC_tool', models.BooleanField(default=False, help_text='Check if the tool is related to SEEC', verbose_name='SEEC Related Tool')),
                ('contact_count', models.IntegerField(default=0, help_text=['Number of times the submitter has been contacted'])),
                ('last_curated_date', models.DateField(blank=True, null=True)),
                ('last_curated_by', models.CharField(blank=True, max_length=100)),
                ('all_curators', models.ManyToManyField(blank=True, related_name='curated_submissions', to=settings.AUTH_USER_MODEL)),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories that are applicable to the resource', related_name='+', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, help_text='The collections that are applicable to the resource', related_name='+', to='website.collection')),
                ('curator_lock', models.ForeignKey(blank=True, help_text='Curator who has submitted edits for approval', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locked_submissions', to=settings.AUTH_USER_MODEL, verbose_name='locked by curator')),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='submission',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource', to='website.submission'),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_notification_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last notification date')),
                ('notification_frequency', models.CharField(choices=[('IMMEDIATELY', 'Immediately'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('PAUSED', 'Paused')], default='IMMEDIATELY', help_text='Choose to pause notifications or be contacted immediately, daily, or weekly when new tools are added to your selected categories.', max_length=20)),
                ('subscriber_email', models.EmailField(error_messages={'unique': 'A subscription already exists for this email address. Please update your existing subscription instead.'}, help_text='Please provide an email address at which HSSI can alert you.', max_length=254, unique=True, verbose_name='your email')),
                ('internal', models.BooleanField(default=False, help_text='Check to mark this as an internal (team member) subscription to allow notifications from Dev', verbose_name='is internal')),
                ('categories', models.ManyToManyField(blank=True, related_name='subscriptions', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, related_name='subscriptions', to='website.collection')),
            ],
            options={
                'ordering': ['-last_notification_date'],
            },
        ),
        migrations.CreateModel(
            name='PendingSubscriptionNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('resources', models.ManyToManyField(related_name='resources', to='website.resource')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to='website.subscription')),
            ],
            options={
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('member_image', models.ImageField(blank=True, upload_to=website.models.resource_media_directory_path)),
                ('description', models.TextField(max_length=700)),
                ('personal_url', models.URLField(blank=True)),
                ('order', models.PositiveIntegerField(default=website.models.num_team_members, validators=[django.core.validators.MaxValueValidator(website.models.num_team_members)])),
                ('previous_order', models.IntegerField(default=-1)),
                ('is_alumnus', models.BooleanField(default=False)),
                ('is_curator', models.BooleanField(default=False)),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories that the person helped curate.', related_name='curators', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, help_text='The collections that the person heped curate.', related_name='curators', to='website.collection')),
                ('curator_account', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_member', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ToolType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('abbreviation', models.CharField(blank=True, max_length=4)),
                ('theme_color', colorful.fields.RGBColorField(default='#000000')),
                ('text_color', colorful.fields.RGBColorField(default='#ffffff')),
                ('description', models.TextField(blank=True, max_length=700)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('children', models.ManyToManyField(blank=True, related_name='parents', to='website.tooltype')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='submission',
            name='tool_types',
            field=models.ManyToManyField(blank=True, help_text='The tool types that are applicable to the resource', related_name='+', to='website.tooltype'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tool_types',
            field=models.ManyToManyField(blank=True, help_text='The tool types that are applicable to the resource', related_name='+', to='website.tooltype'),
        ),
        migrations.CreateModel(
            name='InLitResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='The name of the resource (limited to 40 characters)', max_length=150, verbose_name='resource name')),
                ('subtitle', models.CharField(blank=True, help_text='A descriptive sub-title (e.g. “Bayesian Statistical Analysis for Transit Lightcurve Fitting”; limited to 100 characters)', max_length=100, verbose_name='resource subtitle')),
                ('version', models.CharField(blank=True, help_text='The (optional) version number of the resource (name + version must be unique). Updated regularly for github resources with releases.', max_length=20)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modification_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last mod date')),
                ('credits', models.CharField(blank=True, help_text='The developer/researcher credits of the resource (e.g. “Smith, J. et al.” or “The COOL Team”; may contain HTML)', max_length=256)),
                ('description', models.TextField(blank=True, help_text='A description of the resource <strong>(may contain HTML; limited to 700 characters)</strong>', max_length=700)),
                ('concise_description', models.CharField(blank=True, help_text='A short (suggested 120 char. max.) descriptive sentence to be used in social media and search previews.', max_length=200)),
                ('code_languages', models.CharField(blank=True, default='', help_text='A list of coding languages used by this tool, seperated by commas (ex: Python3, C, Fortran). If the tool is a website or catalog, or has no code to interact with, put N/A', max_length=256, verbose_name='Code language(s)')),
                ('logo_image', models.ImageField(blank=True, help_text='Upload an (optional) logo image for the resource (limited to 1MB)', upload_to=website.models.resource_media_directory_path)),
                ('logo_link', models.URLField(blank=True, help_text="<strong> Add one link only - </strong>An (optional) link to be associated with the resource's logo")),
                ('about_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to further information or README about the resource (not the original publication)')),
                ('ads_abstract_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to an ADS entry or other bibliographic location for the original publication of the resource; links to ADS libraries also supported', verbose_name='ADS abstract/library link')),
                ('jupyter_link', models.URLField(blank=True, help_text="<strong> Add one link only - </strong>An (optional) link to an interactive Jupyter Notebook tutorial on <a href='https://mybinder.org/' target='_blank' rel='noopener noreferrer'>MyBinder.org</a> or any similar resource", verbose_name='Interactive jupyter notebook tutorial link')),
                ('download_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to downloadable source code and other resources; can be Github, Bitbucket, or any other online repository', verbose_name='Public source code download link')),
                ('download_data_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to downloadable data and other resources; can be Github, Bitbucket, or any other online repository', verbose_name='Public data download link')),
                ('launch_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to a web-accessible interface for the resource', verbose_name='Web Interface link')),
                ('demo_link', models.URLField(blank=True, help_text='<strong> Add one link only - </strong>An (optional) link to tutorial video for the resource', verbose_name='Demo video link')),
                ('discuss_link', models.URLField(blank=True, help_text='An (optional) link to a discussion site for the resource')),
                ('citation_count', models.IntegerField(default=None, editable=False, null=True, verbose_name='citation count')),
                ('related_tool_string', models.CharField(blank=True, default='', help_text='List any tools related to the resource in this submission, i.e. tools that this software has expanded on, tools built off of this software, or tools that work in tandem with this software', max_length=256, verbose_name='Related Tool(s)')),
                ('search_keywords', models.CharField(blank=True, default='', help_text='Keywords to prioritize in search', max_length=256, verbose_name='Search Keywords')),
                ('ascl_id', models.CharField(blank=True, default='', help_text='ASCL ID (YYMM.NNN)', max_length=8, verbose_name='ASCL ID')),
                ('ascii_credits', models.CharField(blank=True, max_length=256)),
                ('is_published', models.BooleanField(default=False, help_text='Indicates whether this is a published HSSI resource')),
                ('status_notes', models.TextField(blank=True)),
                ('SEEC_tool', models.BooleanField(default=False, help_text='Check if the tool is related to SEEC', verbose_name='SEEC Related Tool')),
                ('categories', models.ManyToManyField(blank=True, help_text='The categories that are applicable to the resource', related_name='+', to='website.category')),
                ('collections', models.ManyToManyField(blank=True, help_text='The collections that are applicable to the resource', related_name='+', to='website.collection')),
                ('submission', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='il_resource', to='website.submission')),
                ('tool_types', models.ManyToManyField(blank=True, help_text='The tool types that are applicable to the resource', related_name='+', to='website.tooltype')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
