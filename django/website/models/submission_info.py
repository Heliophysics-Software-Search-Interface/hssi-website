import uuid
from typing import Callable, TYPE_CHECKING
if TYPE_CHECKING:
    from .software import Software

from django.db import models

from .person import Person, Curator

class SubmissionStatusCode(models.IntegerChoices):
    PROPOSED_RESOURCE = 1, "Proposed Resource"
    READY_FOR_CONTACT = 2, "Ready for Contact"
    CONTACTED = 3, "Contacted"
    RESOURCE_DEV_PAUSED = 4, "Resource Dev Paused"
    RECEIVED = 5, "Received"
    IN_REVIEW_INTERNAL = 6, "In Review (Our End)"
    IN_REVIEW_EXTERNAL = 7, "In Review (Their End)"
    RESOURCE_CREATED = 8, "Resource Created (Published)"
    REJECTED = 9, "Rejected/Abandoned"
    SPAM = 10, "Spam"

class SubmissionInfo(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    dateModified = models.DateField(auto_now=True)
    modificationDescription = models.TextField(blank=True, null=True)
    metadataVersionNumber = models.CharField(max_length=50, blank=True, null=True)
    submitter = models.ForeignKey(
        Person,
        on_delete=models.CASCADE, 
        null=True, 
        blank=True, 
        related_name='submission_info'
    )
    submitterEmail = models.EmailField()
    curator = models.ForeignKey(
        Curator,
        on_delete=models.CASCADE, 
        null=True, 
        blank=True, 
        related_name='submission_info_owner'
    )
    curatorEmail = models.EmailField()
    submissionDate = models.DateField()
    internalStatusCode = models.IntegerField(
        choices=SubmissionStatusCode.choices, 
        default=SubmissionStatusCode.PROPOSED_RESOURCE
    )
    internalStatusNote = models.TextField(blank=True, null=True)
    leadCurator = models.ForeignKey(
        Curator,
        on_delete=models.CASCADE, 
        null=True, 
        blank=True, 
        related_name='submission_info_leader'
    )
    lastContactDate = models.DateField(blank=True, null=True)
    contactCount = models.IntegerField(default=0)
    curatorLock = models.BooleanField(default=False)
    outOfSync = models.BooleanField(default=False)

    # specified for intellisense, defined in other model
    software: models.Manager['Software']

    # autogenerated django integer choice string getter
    get_internalStatusCode_display: Callable[[], str]

    class Meta: 
        ordering = ['dateModified', 'submitter__lastName']
        verbose_name_plural = "  Submission info"
    def __str__(self): 
        return (
            f"{str(self.submissionDate)} - " + f"{str(self.software)}: " +
            f"{self.get_internalStatusCode_display()}"
        )
